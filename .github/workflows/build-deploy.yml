name: Build and deploy code

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-22.04
    environment:
      name: Testing
    env:
      POSTGRES_HOST: ${{secrets.POSTGRES_HOST}}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      DATABASE: ${{ secrets.DATABASE }}
      POSTS_TABLE: ${{ secrets.POSTS_TABLE }}
      USERS_TABLE: ${{ secrets.USERS_TABLE }}
      VOTES_TABLE: ${{ secrets.VOTES_TABLE }}
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      JWT_ALOGORITHM: ${{ secrets.JWT_ALOGORITHM }}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DATABASE }}_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Pulling git repo
        uses: actions/checkout@v2

      - name: Installing python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Update PIP
        run: python -m pip install -U pip

      - name: Install all dependencies
        run: pip install -r requirements.txt

      - name: Test with pytest
        run: |
          pip install pytest
          pip install requests
          pytest

      # - name: Login to Docker Hub
      #   uses: docker/login-action@v1
      #   with:
      #       username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #       password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # - name: Set up Docker Buildx
      #   id: buildx
      #   uses: docker/setup-buildx-action@v1

      # - name: Build and push docker
      #   id: docker_build
      #   uses: docker/build-push-action@v2
      #   with:
      #       context: ./
      #       file: ./Dockerfile
      #       builder: ${{ steps.buildx.outputs.name }}
      #       push: true
      #       tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fastapi_app:latest
      #       cache-from: type=local,src=/tmp/.buildx-cache
      #       cache-to: type=local,dest=/tmp/.buildx-cache

      # - name: Image digest
      #   run: echo ${{ steps.docker_build.outputs.digest }}

  deploy:
    needs: [build]
    runs-on: ubuntu-22.04
    environment:
      name: production
    steps:
      - name: Pulling git repo
        uses: actions/checkout@v2

      - name: Deploying to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: ${{secrets.HEROKU_APP_NAME}}
          heroku_email: ${{secrets.HEROKU_EMAIL}}

      - name: Deploying to Ubuntu Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          password: ${{ secrets.PROD_PASSWORD }}
          script: |
            cd FastAPI-App/
            git pull
            sudo systemctl restart demo-fastapi-app.service